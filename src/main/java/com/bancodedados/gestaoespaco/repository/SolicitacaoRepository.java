package com.bancodedados.gestaoespaco.repository;

import com.bancodedados.gestaoespaco.model.Solicitacao;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.sql.DataSource; // Or manage connections manually, see note below

public class SolicitacaoRepository {

    private final DataSource dataSource; // Using DataSource is recommended for connection pooling

    // Constructor to inject the DataSource
    public SolicitacaoRepository(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    /**
     * Finds all Solicitacao entities with a specific status using pure JDBC.
     *
     * @param status The status to search for (e.g., "PENDENTE", "APROVADA", "REJEITADA").
     * @return A list of Solicitacao entities matching the provided status.
     */
    public List<Solicitacao> findByStatus(String status) {
        List<Solicitacao> solicitacoes = new ArrayList<>();
        String sql = "SELECT id, sala, data, periodo, status FROM solicitacao WHERE status = ?";

        try (Connection conn = dataSource.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, status); // Set the status parameter

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Solicitacao solicitacao = new Solicitacao();
                    solicitacao.setId(rs.getLong("id"));
                    solicitacao.setSala(rs.getString("sala"));
                    // Assuming data and periodo are String. Adjust if they are Date/Time types
                    solicitacao.setData(rs.getString("data"));
                    solicitacao.setPeriodo(rs.getString("periodo"));
                    solicitacao.setStatus(rs.getString("status"));
                    solicitacoes.add(solicitacao);
                }
            }
        } catch (SQLException e) {
            // Log the exception or throw a custom runtime exception
            System.err.println("Error finding solicitacoes by status: " + e.getMessage());
            throw new RuntimeException("Database error retrieving solicitacoes", e);
        }
        return solicitacoes;
    }

    // You would also need methods for other CRUD operations (save, findById, delete, etc.)
    // For example, a save method:
    public Solicitacao save(Solicitacao solicitacao) {
        String sql = "INSERT INTO solicitacao (sala, data, periodo, status) VALUES (?, ?, ?, ?)";
        // If ID is auto-generated by the DB, you might need to retrieve it
        // Or if it's updated on an existing record, you'd use an UPDATE statement
        try (Connection conn = dataSource.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, solicitacao.getSala());
            pstmt.setString(2, solicitacao.getData());
            pstmt.setString(3, solicitacao.getPeriodo());
            pstmt.setString(4, solicitacao.getStatus());

            int affectedRows = pstmt.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Creating solicitacao failed, no rows affected.");
            }

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    solicitacao.setId(generatedKeys.getLong(1));
                } else {
                    throw new SQLException("Creating solicitacao failed, no ID obtained.");
                }
            }
        } catch (SQLException e) {
            System.err.println("Error saving solicitacao: " + e.getMessage());
            throw new RuntimeException("Database error saving solicitacao", e);
        }
        return solicitacao;
    }

    // Add other methods as needed:
    // public Solicitacao findById(Long id) { ... }
    // public void deleteById(Long id) { ... }
    // public List<Solicitacao> findAll() { ... }
}